{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/conn_info/": {
            "get": {
                "tags": [
                    "conn_info"
                ],
                "description": "get ConnInfo",
                "operationId": "ConnInfoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConnInfo"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "conn_info"
                ],
                "description": "create ConnInfo",
                "operationId": "ConnInfoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ConnInfo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConnInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ConnInfo"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/conn_info/{id}": {
            "get": {
                "tags": [
                    "conn_info"
                ],
                "description": "get ConnInfo by id",
                "operationId": "ConnInfoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConnInfo"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "conn_info"
                ],
                "description": "update the ConnInfo",
                "operationId": "ConnInfoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ConnInfo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ConnInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ConnInfo"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "conn_info"
                ],
                "description": "delete the ConnInfo",
                "operationId": "ConnInfoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/job_info/": {
            "get": {
                "tags": [
                    "job_info"
                ],
                "description": "get JobInfo",
                "operationId": "JobInfoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.JobInfo"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "job_info"
                ],
                "description": "create JobInfo",
                "operationId": "JobInfoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for JobInfo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.JobInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.JobInfo"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/job_info/{id}": {
            "get": {
                "tags": [
                    "job_info"
                ],
                "description": "get JobInfo by id",
                "operationId": "JobInfoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.JobInfo"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "job_info"
                ],
                "description": "update the JobInfo",
                "operationId": "JobInfoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for JobInfo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.JobInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.JobInfo"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "job_info"
                ],
                "description": "delete the JobInfo",
                "operationId": "JobInfoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/project_image/": {
            "get": {
                "tags": [
                    "project_image"
                ],
                "description": "get ProjectImage",
                "operationId": "ProjectImageController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ProjectImage"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "project_image"
                ],
                "description": "create ProjectImage",
                "operationId": "ProjectImageController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ProjectImage content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProjectImage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ProjectImage"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/project_image/{id}": {
            "get": {
                "tags": [
                    "project_image"
                ],
                "description": "get ProjectImage by id",
                "operationId": "ProjectImageController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ProjectImage"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "project_image"
                ],
                "description": "update the ProjectImage",
                "operationId": "ProjectImageController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ProjectImage content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProjectImage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ProjectImage"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "project_image"
                ],
                "description": "delete the ProjectImage",
                "operationId": "ProjectImageController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/user_info/": {
            "get": {
                "tags": [
                    "user_info"
                ],
                "description": "get UserInfo",
                "operationId": "UserInfoController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "user_info"
                ],
                "description": "create UserInfo",
                "operationId": "UserInfoController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserInfo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.UserInfo"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user_info/{id}": {
            "get": {
                "tags": [
                    "user_info"
                ],
                "description": "get UserInfo by id",
                "operationId": "UserInfoController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user_info"
                ],
                "description": "update the UserInfo",
                "operationId": "UserInfoController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserInfo content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user_info"
                ],
                "description": "delete the UserInfo",
                "operationId": "UserInfoController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ConnInfo": {
            "title": "ConnInfo",
            "type": "object",
            "properties": {
                "DbName": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IpAddress": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "PortAddress": {
                    "type": "string"
                },
                "TbName": {
                    "type": "string"
                },
                "UserName": {
                    "type": "string"
                }
            }
        },
        "models.JobInfo": {
            "title": "JobInfo",
            "type": "object",
            "properties": {
                "Additioninfo": {
                    "type": "string"
                },
                "Allcut": {
                    "type": "integer",
                    "format": "int64"
                },
                "Currcut": {
                    "type": "integer",
                    "format": "int64"
                },
                "Currstate": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Imagepath": {
                    "type": "string"
                },
                "Jobdetail": {
                    "type": "string"
                },
                "Jobkind": {
                    "type": "string"
                },
                "Jobname": {
                    "type": "string"
                },
                "Objectregin": {
                    "type": "string"
                },
                "Readcut": {
                    "type": "integer",
                    "format": "int64"
                },
                "Salarydetail": {
                    "type": "string"
                },
                "Sharecut": {
                    "type": "integer",
                    "format": "int64"
                },
                "Timedate": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        },
        "models.ProjectImage": {
            "title": "ProjectImage",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ImageUrl": {
                    "type": "string"
                },
                "Imagepath": {
                    "type": "string"
                }
            }
        },
        "models.UserInfo": {
            "title": "UserInfo",
            "type": "object",
            "properties": {
                "Currfunds": {
                    "type": "integer",
                    "format": "int64"
                },
                "EntryReward1": {
                    "type": "number",
                    "format": "float"
                },
                "EntryReward2": {
                    "type": "number",
                    "format": "float"
                },
                "Expectposition": {
                    "type": "string"
                },
                "Gender": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdentifyNum": {
                    "type": "string"
                },
                "Idimage": {
                    "type": "string"
                },
                "InterviewReward": {
                    "type": "number",
                    "format": "float"
                },
                "Ishunter": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Phone": {
                    "type": "string"
                },
                "Place": {
                    "type": "string"
                },
                "ReaderReward": {
                    "type": "number",
                    "format": "float"
                },
                "TrainsmitReward": {
                    "type": "number",
                    "format": "float"
                }
            }
        }
    },
    "tags": [
        {
            "name": "conn_info",
            "description": "ConnInfoController operations for ConnInfo\n"
        },
        {
            "name": "job_info",
            "description": "JobInfoController operations for JobInfo\n"
        },
        {
            "name": "project_image",
            "description": "ProjectImageController operations for ProjectImage\n"
        },
        {
            "name": "user_info",
            "description": "UserInfoController operations for UserInfo\n"
        }
    ]
}